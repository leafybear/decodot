{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Wanikani Open Framework","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":["/^https://(www|preview).wanikani.com//"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1645069584970,"data":{}},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/38582-wanikani-open-framework/code/Wanikani%20Open%20Framework.user.js","uuid":"4afe316b-be1b-4481-8707-5d5fb28c0a16","source":""},{"name":"Bunpro: Auto-show Info","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":["*bunpro.jp/study*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":["*community.bunpro.jp*"],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1645358913898,"data":{}},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/370019-bunpro-auto-show-info/code/Bunpro:%20Auto-show%20Info.user.js","uuid":"a8368bd9-c722-4a1b-b9e7-5e7d630ed838","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBCdW5wcm86IEF1dG8tc2hvdyBJbmZvCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3RhbXBlcm1vbmtleS5uZXQvCi8vIEB2ZXJzaW9uICAgICAgMC4yLjEwCi8vIEBkZXNjcmlwdGlvbiAgQXV0b21hdGljYWxseSBleHBhbmRzIHRoZSBmdWxsIGdyYW1tYXIgaW5mbyB3aGVuIHlvdSBnZXQgYSByZXZpZXcgd3JvbmcuCi8vIEBhdXRob3IgICAgICAgS3VtaXJlaQovLyBAaW5jbHVkZSAgICAgICpidW5wcm8uanAvc3R1ZHkqCi8vIEBleGNsdWRlICAgICAgKmNvbW11bml0eS5idW5wcm8uanAqCi8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy9zY3JpcHRzLzQzMjQxOC13YWl0LWZvci1zZWxlY3Rvci9jb2RlL1dhaXQlMjBGb3IlMjBTZWxlY3Rvci5qcz92ZXJzaW9uPTk5MDIwNwovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvc2NyaXB0cy8zNzA2MjMtYnVucHJvLWhlbHBmdWwtZXZlbnRzL2NvZGUvQnVucHJvOiUyMEhlbHBmdWwlMjBFdmVudHMuanM/dmVyc2lvbj05OTAyMTEKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKOyhmdW5jdGlvbiAoKSB7CiAgICAvL3dhaXQgdW50aWwgd2UncmUgcmV2aWV3aW5nCiAgICAkKCdIVE1MJylbMF0uYWRkRXZlbnRMaXN0ZW5lcigncXVpei1wYWdlJywgZnVuY3Rpb24gKCkgewogICAgICAgIC8vZG8gc3R1ZmYgd2hlbiB3ZSBwcmVzcyBlbnRlciBhbmQgZ2V0IHRoZSBhbnN3ZXIgd3JvbmcKICAgICAgICAkKCcjc3R1ZHktYW5zd2VyLWlucHV0Jykub24oJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgaWYgKGV2ZW50LndoaWNoID09IDEzKSB7CiAgICAgICAgICAgICAgICBvcGVuSWZXcm9uZygpCiAgICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIC8vZG8gc3R1ZmYgd2hlbiB3ZSBjbGljayBzdWJtaXQgYW5kIGdldCB0aGUgYW5zd2VyIHdyb25nCiAgICAgICAgJCgnI3N1Ym1pdC1zdHVkeS1hbnN3ZXInKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIG9wZW5JZldyb25nKCkKICAgICAgICB9KQogICAgfSkKCiAgICAvL29wZW5zIHRoZSBpbmZvIGlmIHlvdSBnZXQgdGhlIGl0ZW0gd3JvbmcKICAgIGZ1bmN0aW9uIG9wZW5JZldyb25nKCkgewogICAgICAgIGlmICgkKCcub29wcy1idXR0b24nKVswXS5zdHlsZS5kaXNwbGF5ID09ICdibG9jaycgfHwgJCgnI2xlYXJuLW5ldy1ncmFtbWFyLXBhZ2UnKS5sZW5ndGgpIHsKICAgICAgICAgICAgJCgnLnNob3ctZ3JhbW1hci10ZXh0JykuY2xpY2soKQogICAgICAgIH0KICAgIH0KfSkoKQo=","requires":[{"meta":{"name":"Wait%20For%20Selector.js","url":"https://greasyfork.org/scripts/432418-wait-for-selector/code/Wait%20For%20Selector.js?version=990207","ts":1647909791721,"mimetype":"text/javascript"},"source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBXYWl0IEZvciBTZWxlY3RvcgovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly90YW1wZXJtb25rZXkubmV0LwovLyBAZGVzY3JpcHRpb24gIFdhaXRzIGZvciBlbGVtZW50cwovLyBAYXV0aG9yICAgICAgIEt1bWlyZWkKLy8gQGluY2x1ZGUgICAgICAqY29tbXVuaXR5LndhbmlrYW5pLmNvbSoKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKOyhmdW5jdGlvbiAod2ZzKSB7CiAgICBsZXQgdmVyc2lvbiA9ICcxLjAuMScKCiAgICAvLyBDcmVhdGUgbmV3IG9ic2VydmVyIG9uIGJvZHkgdG8gbW9uaXRvciBhbGwgRE9NIGNoYW5nZXMKICAgIGxldCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKG11dGF0aW9uSGFuZGxlcikKICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2h0bWwnKVswXSwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSkKCiAgICAvLyBJbnRlcmZhY2UgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIGxpYnJhcnkKICAgIGxldCBpbnRlcmZhY2UgPSB7CiAgICAgICAgdmVyc2lvbiwKICAgICAgICBvYnNlcnZlcjogb2JzZXJ2ZXIsCiAgICAgICAgd2FpdDogd2FpdEZvclNlbGVjdG9yLAogICAgICAgIHVud2FpdDogdW53YWl0SUQsCiAgICAgICAgd2FpdHM6IHt9LAogICAgICAgIHdhaXRzQnlJRDoge30sCiAgICAgICAgbmV4dElEOiAwLAogICAgfQoKICAgIC8vIFN0YXJ0CiAgICBpbnN0YWxsSW50ZXJmYWNlKCkKCiAgICAvLyBDcmVhdGVzIGEgbmV3IGVudHJ5IHRvIHNlYXJjaCBmb3Igd2hlbmV2ZXIgYSBuZXcgZWxlbWVudCBpcyBhZGRlZCB0byB0aGUgRE9NCiAgICBmdW5jdGlvbiB3YWl0Rm9yU2VsZWN0b3Ioc2VsZWN0b3IsIGNhbGxiYWNrKSB7CiAgICAgICAgaWYgKCFpbnRlcmZhY2Uud2FpdHNbc2VsZWN0b3JdKSBpbnRlcmZhY2Uud2FpdHNbc2VsZWN0b3JdID0ge30KICAgICAgICBpbnRlcmZhY2Uud2FpdHNbc2VsZWN0b3JdW2ludGVyZmFjZS5uZXh0SURdID0gY2FsbGJhY2sKICAgICAgICBpbnRlcmZhY2Uud2FpdHNCeUlEW2ludGVyZmFjZS5uZXh0SURdID0gc2VsZWN0b3IKICAgICAgICBzZWFyY2goc2VsZWN0b3IsIHRydWUpCiAgICAgICAgcmV0dXJuIGludGVyZmFjZS5uZXh0SUQrKwogICAgfQoKICAgIC8vIERlbGV0ZXMgYSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgc2VsZWN0b3IKICAgIGZ1bmN0aW9uIHVud2FpdElEKElEKSB7CiAgICAgICAgZGVsZXRlIGludGVyZmFjZS53YWl0c1tpbnRlcmZhY2Uud2FpdHNCeUlEW0lEXV1bSURdCiAgICAgICAgZGVsZXRlIGludGVyZmFjZS53YWl0c0J5SURbSURdCiAgICB9CgogICAgLy8gTWFrZXMgc3VyZSB0aGF0IHRoZSBwdWJsaWMgaW50ZXJmYWNlIGlzIHRoZSBuZXdlc3QgdmVyc2lvbiBhbmQgdGhlIHNhbWUgYXMgdGhlIGxvY2FsIG9uZQogICAgZnVuY3Rpb24gaW5zdGFsbEludGVyZmFjZSgpIHsKICAgICAgICBpZiAoIXdmcykgd2luZG93LndmcyA9IGludGVyZmFjZQogICAgICAgIGVsc2UgaWYgKHdmcy52ZXJzaW9uIDwgaW50ZXJmYWNlLnZlcnNpb24pIHsKICAgICAgICAgICAgd2ZzLnZlcnNpb24gPSBpbnRlcmZhY2UudmVyc2lvbgogICAgICAgICAgICB3ZnMub2JzZXJ2ZXIuZGlzY29ubmVjdCgpCiAgICAgICAgICAgIHdmcy5vYnNlcnZlciA9IGludGVyZmFjZS5vYnNlcnZlcgogICAgICAgICAgICB3ZnMud2FpdCA9IGludGVyZmFjZS53YWl0CiAgICAgICAgICAgIHdmcy51bndhaXQgPSBpbnRlcmZhY2UudW53YWl0CiAgICAgICAgfQogICAgICAgIGludGVyZmFjZSA9IHdmcyB8fCBpbnRlcmZhY2UKICAgIH0KCiAgICAvLyBXYWl0cyB1bnRpbCB0aGVyZSBoYXMgYmVlbiBtb3JlIHRoYW4gMzAwIG1zIGJldHdlZW4gbXV0YXRpb25zIGFuZCB0aGVuIGNoZWNrcyBmb3IgbmV3IGVsZW1lbnRzCiAgICBsZXQgbGFzdE11dGF0aW9uRGF0ZSA9IDAgLy8gRXBvY2ggb2YgbGFzdCBtdXRhdGlvbiBldmVudAogICAgbGV0IHRpbWVvdXRJRCA9IDAKICAgIGZ1bmN0aW9uIG11dGF0aW9uSGFuZGxlcihtdXRhdGlvbnMpIHsKICAgICAgICBsZXQgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gbGFzdE11dGF0aW9uRGF0ZQogICAgICAgIGxhc3RNdXRhdGlvbkRhdGUgPSBEYXRlLm5vdygpCiAgICAgICAgaWYgKGR1cmF0aW9uIDwgMzAwKSB7CiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SUQpCiAgICAgICAgICAgIHRpbWVvdXRJRCA9IHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAgICAgZm9yIChsZXQgc2VsZWN0b3IgaW4gaW50ZXJmYWNlLndhaXRzKSBzZWFyY2goc2VsZWN0b3IpCiAgICAgICAgICAgIH0sIDMwMCkKICAgICAgICB9CiAgICB9CgogICAgLy8gU2VhcmNoZXMgZm9yIHRoZSBzZWxlY3RvciBhbmQgY2FsbHMgdGhlIGNhbGxiYWNrIG9uIHRoZSBmb3VuZCBlbGVtZW50cwogICAgZnVuY3Rpb24gc2VhcmNoKHNlbGVjdG9yLCBhbGwgPSBmYWxzZSkgewogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpLmZvckVhY2goKGUsIGkpID0+IHsKICAgICAgICAgICAgbGV0IGNhbGxiYWNrcyA9IE9iamVjdC52YWx1ZXMoaW50ZXJmYWNlLndhaXRzW3NlbGVjdG9yXSkKICAgICAgICAgICAgaWYgKGFsbCB8fCAhZS5XRlNGb3VuZCB8fCBlLldGU0ZvdW5kID09IGxhc3RNdXRhdGlvbkRhdGUpIHsKICAgICAgICAgICAgICAgIGZvciAobGV0IGNhbGxiYWNrIG9mIGNhbGxiYWNrcykgY2FsbGJhY2soZSkKICAgICAgICAgICAgICAgIGUuV0ZTRm91bmQgPSBsYXN0TXV0YXRpb25EYXRlCiAgICAgICAgICAgIH0KICAgICAgICB9KQogICAgfQp9KSh3aW5kb3cud2ZzKQo="},{"meta":{"name":"Bunpro:%20Helpful%20Events.js","url":"https://greasyfork.org/scripts/370623-bunpro-helpful-events/code/Bunpro:%20Helpful%20Events.js?version=990211","ts":1647909791716,"mimetype":"text/javascript"},"source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBCdW5wcm86IEhlbHBmdWwgRXZlbnRzCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3RhbXBlcm1vbmtleS5uZXQvCi8vIEB2ZXJzaW9uICAgICAgMS4wLjIKLy8gQGF1dGhvciAgICAgICBLdW1pcmVpCi8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy9zY3JpcHRzLzQzMjQxOC13YWl0LWZvci1zZWxlY3Rvci9jb2RlL1dhaXQlMjBGb3IlMjBTZWxlY3Rvci5qcz92ZXJzaW9uPTk5MDIwNwovLyBAaW5jbHVkZSAgICAgICpidW5wcm8uanAqCi8vIEBleGNsdWRlICAgICAgKmNvbW11bml0eS5idW5wcm8uanAqCi8vID09L1VzZXJTY3JpcHQ9PQoKOyhmdW5jdGlvbiAod2ZzKSB7CiAgICAvLyBBZGQgYSBjdXN0b20gZXZlbnQgZm9yIHdoZW4gQlAgY3JlYXRlcyBhIG5ldyBib2R5CiAgICB2YXIgbmV3Qm9keSA9IG5ldyBFdmVudCgnbmV3LWJvZHknKQogICAgd2ZzLndhaXQoJ2JvZHkgPiBoZWFkZXInLCBmdW5jdGlvbiAoZSkgewogICAgICAgIGZpcmVFdmVudChuZXdCb2R5KQogICAgfSkKCiAgICAvLyBBZGQgYSBjdXN0b20gZXZlbnQgZm9yIHdoZW4geW91IGdldCBhIG5ldyBpdGVtIGluIHJldmlld3MKICAgIHZhciBuZXdSZXZpZXdJdGVtID0gbmV3IEV2ZW50KCduZXctcmV2aWV3LWl0ZW0nKQogICAgd2ZzLndhaXQoJy5sZXZlbF9sZXNzb25faW5mbyBhJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICBmaXJlRXZlbnQobmV3UmV2aWV3SXRlbSkKICAgIH0pCgogICAgLy8gQWRkIGEgY3VzdG9tIGV2ZW50IHdoZW4geW91IGdvIHRvIHN0dWR5IG9yIGNyYW0gcGFnZQogICAgdmFyIHF1aXpQYWdlID0gbmV3IEV2ZW50KCdxdWl6LXBhZ2UnKQogICAgd2ZzLndhaXQoJyNzaG93LWdyYW1tYXInLCBmdW5jdGlvbiAoZSkgewogICAgICAgIGZpcmVFdmVudChxdWl6UGFnZSkKICAgIH0pCgogICAgLy8gQWRkIGEgY3VzdG9tIGV2ZW50IHdoZW4geW91IGdvIHRvIHN0dWR5IHBhZ2UKICAgIHZhciBzdHVkeVBhZ2UgPSBuZXcgRXZlbnQoJ3N0dWR5LXBhZ2UnKQogICAgd2ZzLndhaXQoJyNzdHVkeS1wYWdlICNzaG93LWdyYW1tYXInLCBmdW5jdGlvbiAoZSkgewogICAgICAgIGZpcmVFdmVudChzdHVkeVBhZ2UpCiAgICB9KQoKICAgIC8vIEFkZCBhIGN1c3RvbSBldmVudCB3aGVuIHlvdSBnbyB0byBjcmFtIHBhZ2UKICAgIHZhciBjcmFtUGFnZSA9IG5ldyBFdmVudCgnY3JhbS1wYWdlJykKICAgIHdmcy53YWl0KCcjY3JhbS1wYWdlICNzaG93LWdyYW1tYXInLCBmdW5jdGlvbiAoZSkgewogICAgICAgIGZpcmVFdmVudChjcmFtUGFnZSkKICAgIH0pCgogICAgLy8gRmlyZXMgdGhlIGdpdmVuIGV2ZW50IG9uIHRoZSBIVE1MIGVsZW1lbnQKICAgIGZ1bmN0aW9uIGZpcmVFdmVudChldmVudCkgewogICAgICAgIHZhciByZXRyeUludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PSAnY29tcGxldGUnKSB7CiAgICAgICAgICAgICAgICAkKCdIVE1MJylbMF0uZGlzcGF0Y2hFdmVudChldmVudCkKICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocmV0cnlJbnRlcnZhbCkKICAgICAgICAgICAgfQogICAgICAgIH0sIDEwMCkKICAgIH0KfSkod2luZG93LndmcykK"}]},{"name":"Wanikani Heatmap","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"noframes":null,"run_at":null,"override":{"use_includes":[],"orig_includes":["/^https://(www|preview).wanikani.com/(dashboard)?$/"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]},"tab_types":null},"storage":{"ts":1645589526382,"data":{}},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/377336-wanikani-heatmap/code/Wanikani%20Heatmap.user.js","uuid":"42a2e87a-eb2d-476a-9416-923b7458b301","source":"","requires":[{"meta":{"name":"Wanikani:%20Review%20Cache.js","url":"https://greasyfork.org/scripts/410909-wanikani-review-cache/code/Wanikani:%20Review%20Cache.js?version=952556","ts":1648186038330,"mimetype":"text/javascript"},"source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBXYW5pa2FuaTogUmV2aWV3IENhY2hlCi8vIEB2ZXJzaW9uICAgICAgMS4wLjExCi8vIEBkZXNjcmlwdGlvbiAgTWFuYWdlcyBhIGNhY2hlIG9mIGFsbCB0aGUgdXNlcidzIHJldmlld3MKLy8gQGF1dGhvciAgICAgICBLdW1pcmVpCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKHdrb2YpIHsKICAgIC8vIE1hbnVhbGx5IGluY3JlbWVudCB0byBpbml0aWF0ZSByZWxvYWQgZm9yIGFsbCB1c2VycwogICAgY29uc3QgY2FjaGVfdmVyc2lvbiA9IDEKCiAgICAvLyBSZXZlYWwgZnVuY3Rpb25zIHRvIHdpbmRvdwogICAgaWYgKCF3aW5kb3cucmV2aWV3X2NhY2hlIHx8ICF3aW5kb3cucmV2aWV3X2NhY2hlLnZlcnNpb24gfHwgd2luZG93LnJldmlld19jYWNoZS52ZXJzaW9uIDwgR01faW5mby5zY3JpcHQudmVyc2lvbikgewogICAgICAgIHdpbmRvdy5yZXZpZXdfY2FjaGUgPSB7Z2V0X3Jldmlld3MsIHJlbG9hZCwgdmVyc2lvbjogR01faW5mby5zY3JpcHQudmVyc2lvbn07CiAgICB9CgogICAgLy8gRmV0Y2ggcmV2aWV3cyBmcm9tIHN0b3JhZ2UKICAgIGZ1bmN0aW9uIGdldF9yZXZpZXdzKCkgewogICAgICAgIHdrb2YuaW5jbHVkZSgnQXBpdjInKTsKICAgICAgICByZXR1cm4gd2tvZi5yZWFkeSgnQXBpdjInKS50aGVuKGxvYWRfZGF0YSkudGhlbih1cGRhdGVfZGF0YSk7CiAgICB9CgogICAgLy8gRGVsZXRlcyBjYWNoZSBhbmQgcmVmZXRjaGVzIHJldmlld3MKICAgIGZ1bmN0aW9uIHJlbG9hZCgpIHsKICAgICAgICByZXR1cm4gd2tvZi5maWxlX2NhY2hlLmRlbGV0ZSgncmV2aWV3X2NhY2hlJykudGhlbihnZXRfcmV2aWV3cyk7CiAgICB9CgogICAgLy8gTG9hZHMgZGF0YSBmcm9tIGNhY2hlCiAgICBmdW5jdGlvbiBsb2FkX2RhdGEoKSB7CiAgICAgICAgcmV0dXJuIHdrb2YuZmlsZV9jYWNoZS5sb2FkKCdyZXZpZXdfY2FjaGUnKS50aGVuKGRlY29tcHJlc3MsIF89PntyZXR1cm4ge2NhY2hlX3ZlcnNpb24sIGRhdGU6ICIxOTcwLTAxLTAxVDAwOjAwOjAwLjAwMFoiLCByZXZpZXdzOiBbXSx9O30pOwogICAgfQoKICAgIC8vIFNhdmUgY2FjaGUKICAgIGZ1bmN0aW9uIHNhdmUoZGF0YSkgewogICAgICAgIHJldHVybiB3a29mLmZpbGVfY2FjaGUuc2F2ZSgncmV2aWV3X2NhY2hlJywgY29tcHJlc3MoZGF0YSkpLnRoZW4oXz0+ZGF0YSk7CiAgICB9CgogICAgLy8gQ29tcHJlc3MgYW5kIGRlY29tcHJlc3MgdGhlIGRhdGVzIGZvciBiZXR0ZXIgdXNlIG9mIHN0b3JhZ2Ugc3BhY2UuCiAgICAvLyBEYXRlcyBhcmUgc3RvcmVkIGFzIHRpbWUgZWxhcGVzZWQgYmV0d2VlbiBpdGVtcywgYnV0IGFyZSByZXR1cm5lZCBhcyBhYnNvbHV0ZSBkYXRlcwogICAgZnVuY3Rpb24gY29tcHJlc3MoZGF0YSkge3JldHVybiBwcmVzcyh0cnVlLCBkYXRhKTt9CiAgICBmdW5jdGlvbiBkZWNvbXByZXNzKGRhdGEpIHtyZXR1cm4gcHJlc3MoZmFsc2UsIGRhdGEpO30KICAgIGZ1bmN0aW9uIHByZXNzKGNvbSwgZGF0YSkgewogICAgICAgIGxldCBsYXN0ID0gMDsKICAgICAgICBsZXQgcHJlc3NlZCA9IGRhdGEucmV2aWV3cy5tYXAoaXRlbSA9PiB7CiAgICAgICAgICAgICAgICBsZXQgbWFwID0gW2NvbSA/IChpdGVtWzBdLWxhc3QpIDogKGxhc3QraXRlbVswXSksIC4uLml0ZW0uc2xpY2UoMSldOwogICAgICAgICAgICAgICAgbGFzdCA9IGNvbSA/IGl0ZW1bMF0gOiBsYXN0K2l0ZW1bMF07CiAgICAgICAgICAgICAgICByZXR1cm4gbWFwOwogICAgICAgICAgICB9KTsKICAgICAgICByZXR1cm4ge2NhY2hlX3ZlcnNpb246IGRhdGEuY2FjaGVfdmVyc2lvbiwgZGF0ZTogZGF0YS5kYXRlLCByZXZpZXdzOiBwcmVzc2VkfTsKICAgIH0KCiAgICAvLyBVcGRhdGVzIHRoZSBjYWNoZQogICAgYXN5bmMgZnVuY3Rpb24gdXBkYXRlX2RhdGEoZGF0YSkgewogICAgICAgIGlmICghZGF0YS5jYWNoZV92ZXJzaW9uIHx8IGRhdGEuY2FjaGVfdmVyc2lvbiA8IGNhY2hlX3ZlcnNpb24pIGRhdGEgPSB7Y2FjaGVfdmVyc2lvbiwgZGF0ZTogIjE5NzAtMDEtMDFUMDA6MDA6MDAuMDAwWiIsIHJldmlld3M6IFtdLH0KICAgICAgICBsZXQgW2RhdGUsIG5ld19yZXZpZXdzXSA9IGF3YWl0IGZldGNoX25ld19yZXZpZXdzKGRhdGEuZGF0ZSk7CiAgICAgICAgaWYgKG5ld19yZXZpZXdzLmxlbmd0aCkgewogICAgICAgICAgICBmb3IgKGxldCBuZXdfcmV2aWV3IG9mIG5ld19yZXZpZXdzKSBkYXRhLnJldmlld3MucHVzaChuZXdfcmV2aWV3KTsKICAgICAgICAgICAgZGF0YS5yZXZpZXdzLnNvcnQoKGEsYikgPT4gYVswXTxiWzBdID8gLTEgOiAxKTsKICAgICAgICAgICAgZGF0YS5kYXRlID0gZGF0ZTsKICAgICAgICAgICAgc2F2ZShkYXRhKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGRhdGEucmV2aWV3czsKICAgIH0KCiAgICAvLyBGZXRjaGVzIGFueSBuZXcgcmV2aWV3cyBmcm9tIHRoZSBBUEkKICAgIGFzeW5jIGZ1bmN0aW9uIGZldGNoX25ld19yZXZpZXdzKGxhc3RfZmV0Y2gpIHsKICAgICAgICBsZXQgdXBkYXRlZF9yZXZpZXdzID0gYXdhaXQgd2tvZi5BcGl2Mi5mZXRjaF9lbmRwb2ludCgncmV2aWV3cycsIHtmaWx0ZXJzOiB7dXBkYXRlZF9hZnRlcjogbGFzdF9mZXRjaH19KTsKICAgICAgICBsZXQgbmV3X3Jldmlld3MgPSB1cGRhdGVkX3Jldmlld3MuZGF0YS5maWx0ZXIoaXRlbSA9PiBsYXN0X2ZldGNoPGl0ZW0uZGF0YS5jcmVhdGVkX2F0KTsKICAgICAgICBuZXdfcmV2aWV3cyA9IG5ld19yZXZpZXdzLm1hcChpdGVtID0+IFsKICAgICAgICAgICAgRGF0ZS5wYXJzZShpdGVtLmRhdGEuY3JlYXRlZF9hdCksCiAgICAgICAgICAgIGl0ZW0uZGF0YS5zdWJqZWN0X2lkLAogICAgICAgICAgICBpdGVtLmRhdGEuc3RhcnRpbmdfc3JzX3N0YWdlLAogICAgICAgICAgICBpdGVtLmRhdGEuaW5jb3JyZWN0X21lYW5pbmdfYW5zd2VycywKICAgICAgICAgICAgaXRlbS5kYXRhLmluY29ycmVjdF9yZWFkaW5nX2Fuc3dlcnMsCiAgICAgICAgXSk7CiAgICAgICAgcmV0dXJuIFt1cGRhdGVkX3Jldmlld3MuZGF0YV91cGRhdGVkX2F0LCBuZXdfcmV2aWV3c107CiAgICB9Cn0pKHdpbmRvdy53a29mKTs="},{"meta":{"name":"Heatmap.js","url":"https://greasyfork.org/scripts/410910-heatmap/code/Heatmap.js?version=888244","ts":1648186038495,"mimetype":"text/javascript"},"source":""}]},{"name":"Wanikani: Overall Progress Bars","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":["/^https://(www|preview).wanikani.com/(dashboard)?$/"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1647573854342,"data":{}},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/441185-wanikani-overall-progress-bars/code/Wanikani:%20Overall%20Progress%20Bars.user.js","uuid":"6903faf2-112e-4773-924f-9cbd7f501938","source":""},{"name":"Bunpro: Streak Chart Additions","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":["*bunpro.jp/user/profile/stats"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1647911369152,"data":{}},"enabled":true,"position":5,"file_url":"https://greasyfork.org/scripts/370059-bunpro-streak-chart-additions/code/Bunpro:%20Streak%20Chart%20Additions.user.js","uuid":"689a41a7-58f8-4ad6-aa73-bf91196475b6","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBCdW5wcm86IFN0cmVhayBDaGFydCBBZGRpdGlvbnMKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vdGFtcGVybW9ua2V5Lm5ldC8KLy8gQHZlcnNpb24gICAgICAwLjEuMwovLyBAZGVzY3JpcHRpb24gIEFkZHMgYSBiYXIgZm9yIHVubGVhcm5lZCBpdGVtcyBhbmQgY2hhbmdlcyB0aGUgbGFiZWxzIG9uIHRoZSBiYXJzIHRvIGJlIG1vcmUgaW5mb3JtYXRpdmUKLy8gQGF1dGhvciAgICAgICBLdW1pcmVpCi8vIEBpbmNsdWRlICAgICAgKmJ1bnByby5qcC91c2VyL3Byb2ZpbGUvc3RhdHMKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQovKmpzaGludCBlc3ZlcnNpb246IDggKi8KCihmdW5jdGlvbigpIHsKICAgIC8vIENoYW5nZSB0aGlzIHRvIGZhbHNlIGlmIHlvdSB3YW50IHRvIGhpZGUgdGhlIHVubGVhcm5lZCBiYXIKICAgIHZhciBkaXNwbGF5VW5sZWFybmVkID0gdHJ1ZTsKCiAgICAvL2FkZHMgdGhlIGJhcnMKICAgIGZ1bmN0aW9uIGVkaXRDaGFydCgpIHsKICAgICAgICB2YXIgY29uZmlnID0gbXlDaGFydC5jaGFydC5jb25maWc7CiAgICAgICAgdmFyIGRhdGFzZXQgPSBjb25maWcuZGF0YS5kYXRhc2V0c1swXTsKICAgICAgICB2YXIgdW5sZWFybmVkID0gdG90YWwgLSBsZWFybmVkOwogICAgICAgIHZhciBncmFkaWVudCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCAwLCA0MDApOwogICAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgwLCAncmdiKDIyNywgMTkxLCAxMjcpJyk7CiAgICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKDEsICdyZ2IoMjE5LCAzMiwgMzUpJyk7CiAgICAgICAgaWYgKGRpc3BsYXlVbmxlYXJuZWQpIHsKICAgICAgICAgICAgZGF0YXNldC5kYXRhLnVuc2hpZnQodW5sZWFybmVkKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYWRkIHRoZSBiYXJzCiAgICAgICAgICAgIGNvbmZpZy5kYXRhLmxhYmVscy51bnNoaWZ0KCIgIik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xhYmVsIHRoZSBiYXJzCiAgICAgICAgICAgIGRhdGFzZXQuYmFja2dyb3VuZENvbG9yID0gWyIjMWIyNDM3IiwgLi4uQXJyYXkoMTMpLmZpbGwoZ3JhZGllbnQpXTsgICAgICAgICAgICAgICAvL21ha2UgdW5sZWFybmVkIGJhciBhIGRpZmZlcmVudCBjb2xvcgogICAgICAgICAgICAkKCcuYnVucHJvLWhhbmtvLXN0YXRzJykucHJlcGVuZCgnPGRpdiBjbGFzcz0iY29sLXhzLTEgc3RyZWFrIGhhbmtvIGhhbmtvLS1ncmV5Ij48L2Rpdj4nKTsKICAgICAgICAgICAgLy9jaGFuZ2Ugc3R5bGluZyBvZiBzdGFtcHMgdG8gbWFrZSByb29tIGZvciB0aGUgdHdvIG5ldyBvbmVzCiAgICAgICAgICAgICQoJ2hlYWQnKS5hcHBlbmQoJzxzdHlsZSBpZD0iQ2hhcnRTY3JpcHRTdHlsZSI+JysKICAgICAgICAgICAgJy5idW5wcm8taGFua28tc3RhdHMgLmhhbmtvIHt3aWR0aDogNy4xNCUgIWltcG9ydGFudDsgcGFkZGluZzogMDt9JysKICAgICAgICAgICAgJ0BtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgeycrCiAgICAgICAgICAgICcuYnVucHJvLWhhbmtvLXN0YXRzIHtwYWRkaW5nLWxlZnQ6IDMzcHggIWltcG9ydGFudDsgcGFkZGluZy1yaWdodDogMTNweCAhaW1wb3J0YW50O30nKwogICAgICAgICAgICAnfScrCiAgICAgICAgICAgICdAbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSB7JysKICAgICAgICAgICAgJy5idW5wcm8taGFua28tc3RhdHMge3BhZGRpbmctbGVmdDogMzhweCAhaW1wb3J0YW50OyBwYWRkaW5nLXJpZ2h0OiA4cHggIWltcG9ydGFudDt9JysKICAgICAgICAgICAgJ30nKwogICAgICAgICAgICAnPC9zdHlsZT4nKTsKICAgICAgICB9CiAgICAgICAgY29uZmlnLm9wdGlvbnMudG9vbHRpcHMuZGlzcGxheUNvbG9ycyA9IGZhbHNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlcyBjb2xvciBib3ggZnJvbSB0b29sdGlwIGxhYmVsCiAgICAgICAgY29uZmlnLm9wdGlvbnMudG9vbHRpcHMuY2FsbGJhY2tzID0ge3RpdGxlOiBmdW5jdGlvbihpdGVtLCBkYXRhKSB7ICAgICAgICAgICAgICAgIC8vYWRkIGludGVydmFsIGluZm8gdG8gdG9vbHRpcAogICAgICAgICAgICB2YXIgbGFiZWxzID0gWyJOb3ciLCAiNGgiLCAiOGgiLCAiMjRoIiwgIjJkIiwgIjRkIiwgIjhkIiwgIjJ3IiwgIjFtIiwgIjJtIiwgIjRtIiwgIjZtIiwgIk5ldmVyIl07CiAgICAgICAgICAgIGlmIChkaXNwbGF5VW5sZWFybmVkKSBsYWJlbHMudW5zaGlmdCgnVW5sZWFybmVkJyk7CiAgICAgICAgICAgIHJldHVybiBsYWJlbHNbaXRlbVswXS5pbmRleF07fX07CiAgICAgICAgICAgIGRhdGFzZXQubGFiZWwgPSAiQ291bnQiOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NoYW5nZXMgIlN0cmVhayIgdG8gIkNvdW50IiBpbiB0b29sdGlwCiAgICAgICAgICAgIG15Q2hhcnQudXBkYXRlKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy91cGRhdGUgY2hhcnQKICAgICAgICB9CgoKICAgICAgICAvL2dldCBudW1iZXIgb2YgbGVhcm5lZCBpdGVtcyBhbmQgdG90YWwgbnVtYmVyIG9mIGl0ZW1zCiAgICAgICAgdmFyIHVybCA9ICQoJyNsb2dvJylbMF0uaHJlZjsgLy9wcm9maWxlIHBhZ2UgdXJsCiAgICAgICAgdmFyIGxlYXJuZWQgPSAwOwogICAgICAgIHZhciB0b3RhbCA9IDA7CiAgICAgICAgJC5nZXQodXJsLCBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICQoZGF0YSkuZmluZCgnLnByb2dyZXNzLWNvdW50JykuZWFjaChmdW5jdGlvbihpLCBlKSB7CiAgICAgICAgICAgICAgICB2YXIgTGVhcm5lZFRvdGFsID0gZS5pbm5lclRleHQuc3BsaXQoJy8nKTsKICAgICAgICAgICAgICAgIGlmICghaXNOYU4oTGVhcm5lZFRvdGFsWzBdKSkgewogICAgICAgICAgICAgICAgICAgIGxlYXJuZWQgKz0gTnVtYmVyKExlYXJuZWRUb3RhbFswXSk7CiAgICAgICAgICAgICAgICAgICAgdG90YWwgKz0gTnVtYmVyKExlYXJuZWRUb3RhbFsxXS5zcGxpdCgiICIpWzBdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSkudGhlbihlZGl0Q2hhcnQpOwogICAgfSkoKTsK"}]}